/*
 * Copyright (c) 2020 D4L data4life gGmbH / All rights reserved.
 *
 * D4L owns all legal rights, title and interest in and to the Software Development Kit ("SDK"),
 * including any intellectual property rights that subsist in the SDK.
 *
 * The SDK and its documentation may be accessed and used for viewing/review purposes only.
 * Any usage of the SDK for other purposes, including usage for the development of
 * applications/third-party applications shall require the conclusion of a license agreement
 * between you and D4L.
 *
 * If you are interested in licensing the SDK for your own applications/third-party
 * applications and/or if youâ€™d like to contribute to the development of the SDK, please
 * contact D4L by email to help@data4life.care.
 */

apply plugin: 'com.android.library'


android {
    compileSdkVersion AndroidConfig.compileSdkVersion
    buildToolsVersion "28.0.3"

    defaultConfig {
        minSdkVersion AndroidConfig.minSdkVersion
        targetSdkVersion AndroidConfig.targetSdkVersion
        versionCode LibraryConfig.versionCode
        versionName LibraryConfig.versionName
    }

    sourceSets.each {
        it.manifest.srcFile "src/androidMain/AndroidManifest.xml"
    }

    lintOptions {
        abortOnError false
    }

    sourceSets {
        main.java.srcDirs += "src/androidMain/kotlin"
        main.res.srcDirs += 'src/androidMain/res'
    }
}

dependencies {
    implementation Libraries.kotlinStdLibJdk8
    implementation Libraries.kotlinCoroutinesAndroid
    api Libraries.fhir
    api Libraries.sdkUtilAndroid

    implementation Libraries.androidSupportAppCompatV7
    implementation Libraries.androidSupportConstraintLayout
}

task androidSourcesJar(type: Jar) {
    archiveClassifier = 'sources'

    from android.sourceSets.main.java.srcDirs
}

task androidJavadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    options.linkSource true
    options.addStringOption('encoding', 'UTF-8')
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    failOnError false
}

task androidJavadocJar(type: Jar, dependsOn: androidJavadoc) {
    archiveClassifier = 'javadoc'
    from androidJavadoc.destinationDir
}

artifacts {
    archives androidSourcesJar
    archives androidJavadocJar
}
